def datacenter =params.DC
def action =params.Action
def application =params.Application
def apifromparameter =params.api
def haproxyserversfromparam = params.server
def publishresults='' 
def apiaemkafkaproducer='Success'
def cause = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')


pipeline {
    agent any

    stages {
        stage('Parallel execution') {
            parallel {
                stage('Application: api-aem-kafka-producer') {
                    when {
                        expression {
                        'api-aem-kafka-producer' in application||'All' in application
                        }
                    }
                    steps {
                        script{
                            try{
                                println "Performing "+ action +" on application api-aem-kafka-producer"
                                //def serverdetails = readJSON file: 'Patching_cycle_25_28/api-aem-kafka-producer.json'
								def serverdetails = readJSON file: 'api-aem-kafka-producer.json'
                                def nceserver = serverdetails.NCESERVERS
                                def ncwserver = serverdetails.NCWSERVERS
                                def directory = serverdetails.DIRECTORY
								def haproxyserversfromparamArray = Arrays.asList((haproxyserversfromparam).split(","))
                                def server
                         
                                if(application =='All') {
									if(datacenter =='NCE'){
										server = nceserver
										println "nce servers are: " + server
									}
									else if(datacenter =='NCW'){
										server = ncwserver
										println "ncw servers are: " + server
									}
                                }
								else 
								{	
									server = haproxyserversfromparamArray
									println "server selected from job parameter: " + server
                                }
								
								def result = ActionAEMKafkaProducer(server,action,directory)
								publishresults = publishresults + "api-aem-kafka-producer: " + result+ "\n"

                            }catch(Exception e) 
                            {
                                println "******** ERROR ********"+e
                                result ='Failure'
								publishresults = publishresults + "api-aem-kafka-producer: " + result+ "\n"
                                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') 
								{
                                    sh "exit 1"
                                }
                            }
                        }
                    }        
                }    
                stage('Application: Serviceability') {
                    when {
                        expression {
                        'serviceability' in application||'All' in application
                        }
                    }
                    steps {
                        script{
                            try{
                                println "Performing "+ action +" on application Serviceability"
                                //def serverdetails = readJSON file: 'Patching_cycle_25_28/serviceability.json'
								def serverdetails = readJSON file: 'serviceability.json'
                                def nceserver = serverdetails.NCESERVERS
                                def ncwserver = serverdetails.NCWSERVERS
                                def allapis= serverdetails.API
                                def directory = serverdetails.DIRECTORY
                                def apiparamaterarray = Arrays.asList((apifromparameter).split(","))
								def haproxyserversfromparamArray = Arrays.asList((haproxyserversfromparam).split(","))
                                def api 
                                def server
                         
                                if(application =='All'){
                                    api = allapis
                                    println "api selected from serviceability.json: " + api
									
									if(datacenter =='NCE'){
                                    server = nceserver
                                    println "nce servers are: " + server
									}
									else if(datacenter =='NCW'){
                                    server = ncwserver
                                    println "ncw servers are: " + server
									}
                                }
                                else {
                                    api = apiparamaterarray
									server = haproxyserversfromparamArray
									println "server selected from job parameter: " + server
                                    println "api selected from job parameter: " + api
                                }
								def result = ActionOnMultpileApi(server, api, action, directory )
								publishresults = publishresults + "serviceability: " + result+ "\n"
								
                            }catch(Exception e) {
                                println "******** ERROR ********"+e
								result ='Failure'
								publishresults = publishresults + "serviceability: " + result+ "\n"
                                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                    sh "exit 1"
                                }
                            }
                        }
                    }
                }
                stage('Application: Smartsheet') {
                    when {
                        expression {
                            'smartsheet' in application||'All' in application
                        }
                    }
                    steps {
                        script{
                            try{    
                                println "Performing "+ action +" on application smartsheet"
                                //def serverdetails = readJSON file: 'Patching_cycle_25_28/smartsheet.json'
								def serverdetails = readJSON file: 'smartsheet.json'
                                def nceserver = serverdetails.NCESERVERS
                                def ncwserver = serverdetails.NCWSERVERS
                                def server
                                def allapis= serverdetails.API
                                def directory = serverdetails.DIRECTORY
								def haproxyserversfromparamArray = Arrays.asList((haproxyserversfromparam).split(","))
                                def apiparamaterarray = Arrays.asList((apifromparameter).split(","))
                                def api 
                     
                                if(application =='All'){
                                    api = allapis
                                    println "api selected from file: " + api
									if(datacenter =='NCE'){
										server = nceserver
										println "nce server are: " + server
									}
									else if(datacenter =='NCW'){
										server = ncwserver
										println "ncw server are: " + server
									}
                                }
                                else {
                                    api = apiparamaterarray
									server = haproxyserversfromparamArray
									println "server selected from job parameter: " + server
                                    println "api selected from job parameter: " + api
                                }
								def result = ActionOnMultpileApi(server, api, action, directory )
								publishresults = publishresults + "smartsheet: " + result+ "\n"
								
                            }catch(Exception e) {
                                println "******** ERROR ********"+e
								result ='Failure'
								publishresults = publishresults + "smartsheet: " + result+ "\n"
                                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                    sh "exit 1"
                                }
                            }
                        }
                    }
                }
                stage('Application: Payment-UI') {
                    when {
                        expression {
                            'payment-ui' in application||'All' in application
                        }
                        }
                    steps {
                        script{
                            try{
                                println "Performing "+ action +" on application payment-ui"
                                //def serverdetails = readJSON file: 'Patching_cycle_25_28/payment-ui.json'
								def serverdetails = readJSON file: 'payment-ui.json'
                                def nceserver = serverdetails.NCESERVERS
                                def ncwserver = serverdetails.NCWSERVERS
								def haproxyserversfromparamArray = Arrays.asList((haproxyserversfromparam).split(","))
                                def server
                                def apiparamaterarray = Arrays.asList((apifromparameter).split(","))
                                
                                if(application =='All'){
									if(datacenter =='NCE'){
										server = nceserver
										println "nce server are: " + server
									}
									else if(datacenter =='NCW'){
										server = ncwserver
										println "ncw server are: " + server
									}
								}
								else 
								{	
									server = haproxyserversfromparamArray
									println "server selected from job parameter: " + server
								}
                                
								def result =ActionHttpd(server,action)							
								publishresults = publishresults + "payment-ui: " + result+ "\n"
								
                            }catch(Exception e) {
								result ='Failure'
								publishresults = publishresults + "payment-ui: " + result+ "\n"
							    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                    sh "exit 1"
                                }
                            }
                        }
                    }
                }
                stage('Application: OOBServiceRouter') {
                    when {
                        expression {
                            'OOBServiceRouter' in application||'All' in application
                        }
                        }
                    steps {
                        script{
                            try{    
                                println "Performing "+ action +" on application OOBServiceRouter"
                                //def serverdetails = readJSON file: 'Patching_cycle_25_28/OOBServiceRouter.json'
								def serverdetails = readJSON file: 'OOBServiceRouter.json'
                                def nceserver = serverdetails.NCESERVERS
                                def ncwserver = serverdetails.NCWSERVERS
								def haproxyserversfromparamArray = Arrays.asList((haproxyserversfromparam).split(","))
                                def server

                                if(application =='All'){
									if(datacenter =='NCE'){
										server = nceserver
										println "nce server are: " + server
									}
									else if(datacenter =='NCW'){
										server = ncwserver
										println "ncw server are: " + server
									}
								}
								else 
								{
								server = haproxyserversfromparamArray
								println "server selected from job parameter: " + server	
								}
								
								def result = ActionOnServiceRouter(server,action)
								publishresults = publishresults + "OOBServiceRouter: " + result+ "\n"
                                    
                            }catch(Exception e) {
                                println "******** ERROR ********"+e
								result ='Failure'
								publishresults = publishresults + "OOBServiceRouter: " + result+ "\n"
                                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                    sh "exit 1"
                                }
                            }               
                        }
                    }
                }
                stage('Application: SALIServicerouter') {
                    when {
                        expression {
                            'SALIServicerouter' in application||'All' in application
                        }
                        }
                    steps {
                        script{
                            try{    
                                println "Performing "+ action +" on application SALIServicerouter"
                                //def serverdetails = readJSON file: 'Patching_cycle_25_28/SALIServicerouter.json'
								def serverdetails = readJSON file: 'SALIServicerouter.json'
                                def nceserver = serverdetails.NCESERVERS
                                def ncwserver = serverdetails.NCWSERVERS
								def haproxyserversfromparamArray = Arrays.asList((haproxyserversfromparam).split(","))
                                def server

                                if(application =='All'){
									if(datacenter =='NCE'){
										server = nceserver
										println "nce server are: " + server
									}
									else if(datacenter =='NCW'){
										server = ncwserver
										println "ncw server are: " + server
									}
								}	
								else 
								{
									server = haproxyserversfromparamArray
									println "server selected from job parameter: " + server	
								}
								
								def result = ActionOnServiceRouter(server,action)
								publishresults = publishresults + "SALIServicerouter: " + result+ "\n"
                                 
                            }catch(Exception e) {
                                println "******** ERROR ********"+e
								result ='Failure'
								publishresults = publishresults + "SALIServicerouter: " + result+ "\n"
                                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                    sh "exit 1"
                                }
                            }               
                        }
                    }
                }                
                stage('Application: OOB api-mobilehandofftoken') {
                    when {
                        expression {
                            'oobapi-mobilehandofftoken' in application||'All' in application
                            }
                        }
                    steps {
                        script{
                            try{
                                println "Performing "+ action +" on application oob-api-mobilehandofftoken"
                                //def serverdetails = readJSON file: 'Patching_cycle_25_28/oob-api-mobilehandofftoken.json'
								def serverdetails = readJSON file: 'oob-api-mobilehandofftoken.json'
                                def nceserver = serverdetails.NCESERVERS
                                def ncwserver = serverdetails.NCWSERVERS
                                def directory = serverdetails.DIRECTORY
								def haproxyserversfromparamArray = Arrays.asList((haproxyserversfromparam).split(","))
                                def server
								def a = 'api-mobilehandofftoken'
								
                                if(application =='All'){
									if(datacenter =='NCE'){
										server = nceserver
										println "nce server are: " + server
									}
									else if(datacenter =='NCW'){
										server = ncwserver
										println "ncw server are: " + server
									}
								}
								else 
								{
									server = haproxyserversfromparamArray
									println "server selected from job parameter: " + server	
								}
								def result = ActionOnSingleApi(server, a, action, directory )
								publishresults = publishresults + "oob-api-mobilehandofftoken: " + result+ "\n"
                                
                            }catch(Exception e) {
                                    println "******** ERROR ********"+e
									result ='Failure'
									publishresults = publishresults + "oob-api-mobilehandofftoken: " + result+ "\n"
                                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                    sh "exit 1"
                                }
                            }
                        }
                    }
                }
                stage('Application: api-llm-token-generator') {
                    when {
                        expression {
                            'api-llm-token-generator' in application||'All' in application
                            }
                        }
                    steps {
                        script{
                            try{
                                println "Performing "+ action +" on application api-llm-token-generator"
                                //def serverdetails = readJSON file: 'Patching_cycle_25_28/llm-token-generator.json'
								def serverdetails = readJSON file: 'llm-token-generator.json'
                                def nceserver = serverdetails.NCESERVERS
                                def ncwserver = serverdetails.NCWSERVERS
                                def directory = serverdetails.DIRECTORY
								def haproxyserversfromparamArray = Arrays.asList((haproxyserversfromparam).split(","))
                                def server
								def a= 'api-llm-token-generator'
								
								if(application =='All'){
									if(datacenter =='NCE'){
										server = nceserver
										println "nce server are: " + server
									}
									else if(datacenter =='NCW'){
										server = ncwserver
										println "ncw server are: " + server
									}
								}	
								else 
								{
									server = haproxyserversfromparamArray
									println "server selected from job parameter: " + server	
								}
								
                                def result = ActionOnSingleApi(server, a, action, directory )
								publishresults = publishresults + "api-llm-token-generator: " + result+ "\n"
								
                            }catch(Exception e) {
                                    println "******** ERROR ********"+e
									result ='Failure'
									publishresults = publishresults + "api-llm-token-generator: " + result+ "\n"
                                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                    sh "exit 1"
                                }
                            }
                        }
                    }
                }
                stage('Application: Mobile Token UI') {
                    when {
                        expression {
                            'mobiletokenui' in application||'All' in application
                        }
                        }
                    steps {
                        script{
                            try{
                                println "Performing "+ action +" on application mobiletokenui"
                                //def serverdetails = readJSON file: 'Patching_cycle_25_28/mobiletokenui.json'
								def serverdetails = readJSON file: 'mobiletokenui.json'
                                def nceserver = serverdetails.NCESERVERS
                                def ncwserver = serverdetails.NCWSERVERS
								def haproxyserversfromparamArray = Arrays.asList((haproxyserversfromparam).split(","))
                                def server

                                if(application =='All'){
									if(datacenter =='NCE'){
										server = nceserver
										println "nce server are: " + server
									}
									else if(datacenter =='NCW'){
										server = ncwserver
										println "ncw server are: " + server
									}
								}
								else 
								{
									server = haproxyserversfromparamArray
									println "server selected from job parameter: " + server									
								}
								
								def result =ActionHttpd(server,action)							
								publishresults = publishresults + "mobiletokenui: " + result+ "\n"
								
                            }catch(Exception e) {
								result ='Failure'
								publishresults = publishresults + "mobiletokenui: " + result+ "\n"
                                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                                    sh "exit 1"
                                }
                            }
                        }
                    }
                }
            }
        }        
    }
    	post {

			always {
			println publishresults	
			/*	sparkSend credentialsId: 'UnifiedBuyflowSparkBot', 
				message: " Job URL: ${env.JOB_URL} \n User: ${cause.userName} \n Application: [${Application}] \n Action: [${action}] \n DC: [${datacenter}] \n Build status: [${currentBuild.currentResult}] \n apiaemkafkaproducer: [${apiaemkafkaproducer}] \n Serviceability: [${Serviceability}] \n Smartsheet:[${Smartsheet}] \n PaymentUI: [${PaymentUI}] \n OOBServiceRouter: [${OOBServiceRouter}] \n SALIServicerouter: [${SALIServicerouter}] \n mobilehandofftoken: [${mobilehandofftoken}] \n llmtokengenerator: [${llmtokengenerator}] \n MobileTokenUI: [${MobileTokenUI}] ",
				spaceList: [[spaceId: '21f9d0e0-92b5-11ee-a0f4-6d1d3af5a51f', 
				spaceName: 'MamtaKT']] */
			}
		} 
}
def ActionOnMultpileApi(Object server, Object api, String action, Object directory ){
	def result ='Success'
	for(s in server) {
		def SSH_OPTION="ssh -q jenkins_worker@${s} -o StrictHostKeyChecking=no"
		for(a in api) 
		{
			println "$SSH_OPTION sudo su - oosuser  ${directory}/app-${action}.sh /data/apps/${a}/bin/app-config.sh" 
			try{
				//sh "$SSH_OPTION sudo su - oosuser  ${directory}/app-${action}.sh /data/apps/${a}/bin/app-config.sh"
			}catch(Exception e) 
			{
				println "******** ERROR ********"+e
				result ='Failure'
				catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') 
				{
				sh "exit 1"
				}
			}
		}
	}
	return result
}
def ActionOnSingleApi(Object server, String api, String action, Object directory ){
	def result ='Success'
	for(s in server) {
		def SSH_OPTION="ssh -q jenkins_worker@${s} -o StrictHostKeyChecking=no"
		println "$SSH_OPTION sudo su - oosuser '${directory}/app-${action}.sh /data/apps/${api}/bin/app-config.sh'" 
		try{
			//sh "$SSH_OPTION sudo su - oosuser '${directory}/app-${action}.sh /data/apps/${api}/bin/app-config.sh'"
		}catch(Exception e) 
		{
			println "******** ERROR ********"+e
			result ='Failure'
			catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') 
			{
				sh "exit 1"
			}
		}
	}
	return result
}
def ActionOnServiceRouter(Object server, String action ){
	def result ='Success'
		for(s in server) {
		def SSH_OPTION="ssh -q jenkins_worker@${s} -o StrictHostKeyChecking=no"
		println "$SSH_OPTION sudo service servicerouter ${action}"
		try{
		   // sh "$SSH_OPTION sudo service servicerouter ${action}"
		}catch(Exception e) 
		{
			println "******** ERROR ********"+e
			result ='Failure'
			catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') 
			{
				sh "exit 1"
			}
		}
	} 
	return result
}
def ActionHttpd(Object server, String action ){
	def result ='Success'
		for(s in server) {
			def SSH_OPTION="ssh -q jenkins_worker@${s} -o StrictHostKeyChecking=no"
			println "$SSH_OPTION sudo service httpd ${action}" 
			try{
			//sh "$SSH_OPTION sudo service httpd ${action}"			
			}catch(Exception e) 
			{
				result='Failure'
				catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') 
				{
					sh "exit 1"
				}
			}
	}
	return result
}
def ActionAEMKafkaProducer(Object server, String action,Object directory ){
	def result ='Success'
	for(s in server) {
		def SSH_OPTION="ssh -q jenkins_worker@${s} -o StrictHostKeyChecking=no"
		println "$SSH_OPTION sudo su - oosuser  '${directory}/bin/app-${action}.sh'" 
		try{
			//sh "$SSH_OPTION sudo su - oosuser  '${directory}/bin/app-${action}.sh'"
			
		}catch(Exception e) 
		{
			println "******** ERROR ********"+e
			result ='Failure'
			catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') 
			{
				sh "exit 1"
			}
		}
	}
	return result
}
aem-kafka-producer
